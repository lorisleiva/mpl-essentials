/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
} from '@metaplex-foundation/umi-core';
import { TokenState, TokenStateArgs, getTokenStateSerializer } from '../types';

export type Token = Account<TokenAccountData>;

export type TokenAccountData = {
  mint: PublicKey;
  owner: PublicKey;
  amount: bigint;
  delegate: Option<PublicKey>;
  state: TokenState;
  isNative: Option<bigint>;
  delegatedAmount: bigint;
  closeAuthority: Option<PublicKey>;
};

export type TokenAccountDataArgs = {
  mint: PublicKey;
  owner: PublicKey;
  amount: number | bigint;
  delegate: Option<PublicKey>;
  state: TokenStateArgs;
  isNative: Option<number | bigint>;
  delegatedAmount: number | bigint;
  closeAuthority: Option<PublicKey>;
};

export function getTokenAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<TokenAccountDataArgs, TokenAccountData> {
  const s = context.serializer;
  return s.struct<TokenAccountData>(
    [
      ['mint', s.publicKey()],
      ['owner', s.publicKey()],
      ['amount', s.u64()],
      ['delegate', s.option(s.publicKey(), { prefix: s.u32(), fixed: true })],
      ['state', getTokenStateSerializer(context)],
      ['isNative', s.option(s.u64(), { prefix: s.u32(), fixed: true })],
      ['delegatedAmount', s.u64()],
      [
        'closeAuthority',
        s.option(s.publicKey(), { prefix: s.u32(), fixed: true }),
      ],
    ],
    { description: 'Token' }
  ) as Serializer<TokenAccountDataArgs, TokenAccountData>;
}

export function deserializeToken(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): Token {
  return deserializeAccount(rawAccount, getTokenAccountDataSerializer(context));
}

export async function fetchToken(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<Token> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'Token');
  return deserializeToken(context, maybeAccount);
}

export async function safeFetchToken(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<Token | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists ? deserializeToken(context, maybeAccount) : null;
}

export async function fetchAllToken(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<Token[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Token');
    return deserializeToken(context, maybeAccount);
  });
}

export async function safeFetchAllToken(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<Token[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeToken(context, maybeAccount as RpcAccount)
    );
}

export function getTokenGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.get('splToken').publicKey;
  return gpaBuilder(context, programId)
    .registerFields<{
      mint: PublicKey;
      owner: PublicKey;
      amount: number | bigint;
      delegate: Option<PublicKey>;
      state: TokenStateArgs;
      isNative: Option<number | bigint>;
      delegatedAmount: number | bigint;
      closeAuthority: Option<PublicKey>;
    }>([
      ['mint', s.publicKey()],
      ['owner', s.publicKey()],
      ['amount', s.u64()],
      ['delegate', s.option(s.publicKey(), { prefix: s.u32(), fixed: true })],
      ['state', getTokenStateSerializer(context)],
      ['isNative', s.option(s.u64(), { prefix: s.u32(), fixed: true })],
      ['delegatedAmount', s.u64()],
      [
        'closeAuthority',
        s.option(s.publicKey(), { prefix: s.u32(), fixed: true }),
      ],
    ])
    .deserializeUsing<Token>((account) => deserializeToken(context, account))
    .whereSize(165);
}

export function getTokenSize(_context = {}): number {
  return 165;
}
