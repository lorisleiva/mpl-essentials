/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  mapSerializer,
} from '@metaplex-foundation/umi-core';

export type AddressLookupTable = Account<AddressLookupTableAccountData>;

export type AddressLookupTableAccountData = {
  discriminator: number;
  deactivationSlot: bigint;
  lastExtendedSlot: bigint;
  lastExtendedStartIndex: number;
  padding: bigint;
  authority: Option<PublicKey>;
  addresses: Array<PublicKey>;
};

export type AddressLookupTableAccountArgs = {
  deactivationSlot: number | bigint;
  lastExtendedSlot: number | bigint;
  lastExtendedStartIndex: number;
  padding: number | bigint;
  authority: Option<PublicKey>;
  addresses: Array<PublicKey>;
};

export async function fetchAddressLookupTable(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<AddressLookupTable> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'AddressLookupTable');
  return deserializeAddressLookupTable(context, maybeAccount);
}

export async function safeFetchAddressLookupTable(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<AddressLookupTable | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists
    ? deserializeAddressLookupTable(context, maybeAccount)
    : null;
}

export async function fetchAllAddressLookupTable(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<AddressLookupTable[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'AddressLookupTable');
    return deserializeAddressLookupTable(context, maybeAccount);
  });
}

export async function safeFetchAllAddressLookupTable(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<AddressLookupTable[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeAddressLookupTable(context, maybeAccount as RpcAccount)
    );
}

export function getAddressLookupTableGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.get('splAddressLookupTable').publicKey;
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: number;
      deactivationSlot: number | bigint;
      lastExtendedSlot: number | bigint;
      lastExtendedStartIndex: number;
      padding: number | bigint;
      authority: Option<PublicKey>;
      addresses: Array<PublicKey>;
    }>([
      ['discriminator', s.u32],
      ['deactivationSlot', s.u64],
      ['lastExtendedSlot', s.u64],
      ['lastExtendedStartIndex', s.u8],
      ['padding', s.u64],
      ['authority', s.fixedOption(s.publicKey, s.u32)],
      ['addresses', s.vec(s.publicKey)],
    ])
    .deserializeUsing<AddressLookupTable>((account) =>
      deserializeAddressLookupTable(context, account)
    )
    .whereField('discriminator', 0);
}

export function deserializeAddressLookupTable(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): AddressLookupTable {
  return deserializeAccount(
    rawAccount,
    getAddressLookupTableAccountDataSerializer(context)
  );
}

export function getAddressLookupTableAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<AddressLookupTableAccountArgs, AddressLookupTableAccountData> {
  const s = context.serializer;
  return mapSerializer<
    AddressLookupTableAccountArgs,
    AddressLookupTableAccountData,
    AddressLookupTableAccountData
  >(
    s.struct<AddressLookupTableAccountData>(
      [
        ['discriminator', s.u32],
        ['deactivationSlot', s.u64],
        ['lastExtendedSlot', s.u64],
        ['lastExtendedStartIndex', s.u8],
        ['padding', s.u64],
        ['authority', s.fixedOption(s.publicKey, s.u32)],
        ['addresses', s.vec(s.publicKey)],
      ],
      'AddressLookupTable'
    ),
    (value) => ({ ...value, discriminator: 0 } as AddressLookupTableAccountData)
  ) as Serializer<AddressLookupTableAccountArgs, AddressLookupTableAccountData>;
}

export function getAddressLookupTableSize(
  context: Pick<Context, 'serializer'>
): number | null {
  return getAddressLookupTableAccountDataSerializer(context).fixedSize;
}

export function findAddressLookupTablePda(
  context: Pick<Context, 'eddsa' | 'programs' | 'serializer'>,
  seeds: {
    /** The address of the LUT's authority */
    authority: PublicKey;
    /** The recent slot associated with the LUT */
    recentSlot: number | bigint;
  }
): Pda {
  const s = context.serializer;
  const programId: PublicKey = context.programs.get(
    'splAddressLookupTable'
  ).publicKey;
  return context.eddsa.findPda(programId, [
    s.publicKey.serialize(seeds.authority),
    s.u64.serialize(seeds.recentSlot),
  ]);
}
