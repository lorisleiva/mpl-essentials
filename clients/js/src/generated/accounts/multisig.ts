/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
} from '@metaplex-foundation/umi-core';

export type Multisig = Account<MultisigAccountData>;

export type MultisigAccountData = {
  m: number;
  n: number;
  isInitialized: boolean;
  signers: Array<PublicKey>;
};

export type MultisigAccountDataArgs = MultisigAccountData;

export function getMultisigAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<MultisigAccountDataArgs, MultisigAccountData> {
  const s = context.serializer;
  return s.struct<MultisigAccountData>(
    [
      ['m', s.u8()],
      ['n', s.u8()],
      ['isInitialized', s.bool()],
      ['signers', s.array(s.publicKey(), { size: 11 })],
    ],
    { description: 'Multisig' }
  ) as Serializer<MultisigAccountDataArgs, MultisigAccountData>;
}

export function deserializeMultisig(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): Multisig {
  return deserializeAccount(
    rawAccount,
    getMultisigAccountDataSerializer(context)
  );
}

export async function fetchMultisig(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<Multisig> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'Multisig');
  return deserializeMultisig(context, maybeAccount);
}

export async function safeFetchMultisig(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<Multisig | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists
    ? deserializeMultisig(context, maybeAccount)
    : null;
}

export async function fetchAllMultisig(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<Multisig[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Multisig');
    return deserializeMultisig(context, maybeAccount);
  });
}

export async function safeFetchAllMultisig(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<Multisig[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeMultisig(context, maybeAccount as RpcAccount)
    );
}

export function getMultisigGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.get('splToken').publicKey;
  return gpaBuilder(context, programId)
    .registerFields<{
      m: number;
      n: number;
      isInitialized: boolean;
      signers: Array<PublicKey>;
    }>([
      ['m', s.u8()],
      ['n', s.u8()],
      ['isInitialized', s.bool()],
      ['signers', s.array(s.publicKey(), { size: 11 })],
    ])
    .deserializeUsing<Multisig>((account) =>
      deserializeMultisig(context, account)
    )
    .whereSize(355);
}

export function getMultisigSize(_context = {}): number {
  return 355;
}
