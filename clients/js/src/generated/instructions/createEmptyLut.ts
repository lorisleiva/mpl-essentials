/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  ACCOUNT_HEADER_SIZE,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u32,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findAddressLookupTablePda } from '../accounts';
import {
  PickPartial,
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPda,
  expectPublicKey,
  expectSome,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type CreateEmptyLutInstructionAccounts = {
  address?: Pda;
  authority?: Signer;
  payer?: Signer;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type CreateEmptyLutInstructionData = {
  discriminator: number;
  recentSlot: bigint;
  bump: number;
};

export type CreateEmptyLutInstructionDataArgs = {
  recentSlot: number | bigint;
  bump: number;
};

export function getCreateEmptyLutInstructionDataSerializer(): Serializer<
  CreateEmptyLutInstructionDataArgs,
  CreateEmptyLutInstructionData
> {
  return mapSerializer<
    CreateEmptyLutInstructionDataArgs,
    any,
    CreateEmptyLutInstructionData
  >(
    struct<CreateEmptyLutInstructionData>(
      [
        ['discriminator', u32()],
        ['recentSlot', u64()],
        ['bump', u8()],
      ],
      { description: 'CreateEmptyLutInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 0 })
  ) as Serializer<
    CreateEmptyLutInstructionDataArgs,
    CreateEmptyLutInstructionData
  >;
}

// Args.
export type CreateEmptyLutInstructionArgs = PickPartial<
  CreateEmptyLutInstructionDataArgs,
  'bump'
>;

// Instruction.
export function createEmptyLut(
  context: Pick<Context, 'eddsa' | 'identity' | 'payer' | 'programs'>,
  input: CreateEmptyLutInstructionAccounts & CreateEmptyLutInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'splAddressLookupTable',
    'AddressLookupTab1e1111111111111111111111111'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    address: { index: 0, isWritable: true, value: input.address ?? null },
    authority: { index: 1, isWritable: false, value: input.authority ?? null },
    payer: { index: 2, isWritable: true, value: input.payer ?? null },
    systemProgram: {
      index: 3,
      isWritable: false,
      value: input.systemProgram ?? null,
    },
  };

  // Arguments.
  const resolvedArgs: CreateEmptyLutInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }
  if (!resolvedAccounts.address.value) {
    resolvedAccounts.address.value = findAddressLookupTablePda(context, {
      authority: expectPublicKey(resolvedAccounts.authority.value),
      recentSlot: expectSome(resolvedArgs.recentSlot),
    });
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedArgs.bump) {
    resolvedArgs.bump = expectPda(resolvedAccounts.address.value)[1];
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getCreateEmptyLutInstructionDataSerializer().serialize(
    resolvedArgs as CreateEmptyLutInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 56 + ACCOUNT_HEADER_SIZE;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
