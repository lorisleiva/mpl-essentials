/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';

// Arguments.
export type SetComputeUnitLimitInstructionData = {
  discriminator: number;
  /** Transaction-wide compute unit limit. */
  units: number;
};

export type SetComputeUnitLimitInstructionDataArgs = {
  /** Transaction-wide compute unit limit. */
  units: number;
};

export function getSetComputeUnitLimitInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  SetComputeUnitLimitInstructionDataArgs,
  SetComputeUnitLimitInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    SetComputeUnitLimitInstructionDataArgs,
    SetComputeUnitLimitInstructionData,
    SetComputeUnitLimitInstructionData
  >(
    s.struct<SetComputeUnitLimitInstructionData>(
      [
        ['discriminator', s.u8()],
        ['units', s.u32()],
      ],
      { description: 'SetComputeUnitLimitInstructionData' }
    ),
    (value) =>
      ({ ...value, discriminator: 2 } as SetComputeUnitLimitInstructionData)
  ) as Serializer<
    SetComputeUnitLimitInstructionDataArgs,
    SetComputeUnitLimitInstructionData
  >;
}

// Instruction.
export function setComputeUnitLimit(
  context: Pick<Context, 'serializer' | 'programs'>,
  input: SetComputeUnitLimitInstructionDataArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'splComputeBudget',
    'ComputeBudget111111111111111111111111111111'
  );

  // Data.
  const data =
    getSetComputeUnitLimitInstructionDataSerializer(context).serialize(input);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
