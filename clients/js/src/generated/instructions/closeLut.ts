/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
} from '@metaplex-foundation/umi-core';

// Accounts.
export type CloseLutInstructionAccounts = {
  address: PublicKey;
  authority?: Signer;
  recipient: PublicKey;
};

// Arguments.
export type CloseLutInstructionData = { discriminator: number };

export type CloseLutInstructionArgs = {};

export function getCloseLutInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<CloseLutInstructionArgs, CloseLutInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    CloseLutInstructionArgs,
    CloseLutInstructionData,
    CloseLutInstructionData
  >(
    s.struct<CloseLutInstructionData>(
      [['discriminator', s.u32]],
      'CloseLutInstructionArgs'
    ),
    (value) => ({ ...value, discriminator: 4 } as CloseLutInstructionData)
  ) as Serializer<CloseLutInstructionArgs, CloseLutInstructionData>;
}

// Instruction.
export function closeLut(
  context: Pick<Context, 'serializer' | 'programs' | 'identity'>,
  input: CloseLutInstructionAccounts
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = context.programs.get(
    'splAddressLookupTable'
  ).publicKey;

  // Resolved accounts.
  const addressAccount = input.address;
  const authorityAccount = input.authority ?? context.identity;
  const recipientAccount = input.recipient;

  // Address.
  keys.push({
    pubkey: addressAccount,
    isSigner: false,
    isWritable: isWritable(addressAccount, true),
  });

  // Authority.
  signers.push(authorityAccount);
  keys.push({
    pubkey: authorityAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(authorityAccount, false),
  });

  // Recipient.
  keys.push({
    pubkey: recipientAccount,
    isSigner: false,
    isWritable: isWritable(recipientAccount, true),
  });

  // Data.
  const data = getCloseLutInstructionDataSerializer(context).serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain,
  };
}
