/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
  publicKey,
} from '@metaplex-foundation/umi-core';
import { findAssociatedTokenPda } from 'rootHooked';

// Accounts.
export type CreateTokenIfMissingInstructionAccounts = {
  /** The account paying for the token account creation if needed */
  payer?: Signer;
  /** The token account that may or may not exist */
  token?: PublicKey;
  /** The mint account of the provided token account */
  mint: PublicKey;
  /** The owner of the provided token account */
  owner?: PublicKey;
  /** The associated token account which may be the same as the token account */
  ata?: PublicKey;
  /** System program */
  systemProgram?: PublicKey;
  /** Token program */
  tokenProgram?: PublicKey;
  /** Associated Token program */
  ataProgram?: PublicKey;
};

// Arguments.
export type CreateTokenIfMissingInstructionData = { discriminator: number };

export type CreateTokenIfMissingInstructionDataArgs = {};

export function getCreateTokenIfMissingInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  CreateTokenIfMissingInstructionDataArgs,
  CreateTokenIfMissingInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    CreateTokenIfMissingInstructionDataArgs,
    CreateTokenIfMissingInstructionData,
    CreateTokenIfMissingInstructionData
  >(
    s.struct<CreateTokenIfMissingInstructionData>([['discriminator', s.u8()]], {
      description: 'CreateTokenIfMissingInstructionData',
    }),
    (value) =>
      ({ ...value, discriminator: 0 } as CreateTokenIfMissingInstructionData)
  ) as Serializer<
    CreateTokenIfMissingInstructionDataArgs,
    CreateTokenIfMissingInstructionData
  >;
}

// Instruction.
export function createTokenIfMissing(
  context: Pick<
    Context,
    'serializer' | 'programs' | 'eddsa' | 'identity' | 'payer'
  >,
  input: CreateTokenIfMissingInstructionAccounts
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = context.programs.get('mplTokenExtras').publicKey;

  // Resolved accounts.
  const payerAccount = input.payer ?? context.payer;
  const ownerAccount = input.owner ?? context.identity.publicKey;
  const mintAccount = input.mint;
  const ataAccount =
    input.ata ??
    findAssociatedTokenPda(context, {
      owner: publicKey(ownerAccount),
      mint: publicKey(mintAccount),
    });
  const tokenAccount = input.token ?? ataAccount;
  const systemProgramAccount = input.systemProgram ?? {
    ...context.programs.get('splSystem').publicKey,
    isWritable: false,
  };
  const tokenProgramAccount = input.tokenProgram ?? {
    ...context.programs.get('splToken').publicKey,
    isWritable: false,
  };
  const ataProgramAccount = input.ataProgram ?? {
    ...context.programs.get('splAssociatedToken').publicKey,
    isWritable: false,
  };

  // Payer.
  signers.push(payerAccount);
  keys.push({
    pubkey: payerAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(payerAccount, true),
  });

  // Token.
  keys.push({
    pubkey: tokenAccount,
    isSigner: false,
    isWritable: isWritable(tokenAccount, false),
  });

  // Mint.
  keys.push({
    pubkey: mintAccount,
    isSigner: false,
    isWritable: isWritable(mintAccount, false),
  });

  // Owner.
  keys.push({
    pubkey: ownerAccount,
    isSigner: false,
    isWritable: isWritable(ownerAccount, false),
  });

  // Ata.
  keys.push({
    pubkey: ataAccount,
    isSigner: false,
    isWritable: isWritable(ataAccount, true),
  });

  // System Program.
  keys.push({
    pubkey: systemProgramAccount,
    isSigner: false,
    isWritable: isWritable(systemProgramAccount, false),
  });

  // Token Program.
  keys.push({
    pubkey: tokenProgramAccount,
    isSigner: false,
    isWritable: isWritable(tokenProgramAccount, false),
  });

  // Ata Program.
  keys.push({
    pubkey: ataProgramAccount,
    isSigner: false,
    isWritable: isWritable(ataProgramAccount, false),
  });

  // Data.
  const data = getCreateTokenIfMissingInstructionDataSerializer(
    context
  ).serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain,
  };
}
