/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';

// Accounts.
export type BurnTokenInstructionAccounts = {
  account: PublicKey;
  mint: PublicKey;
  authority?: Signer;
};

// Arguments.
export type BurnTokenInstructionData = {
  discriminator: number;
  amount: bigint;
};

export type BurnTokenInstructionDataArgs = { amount: number | bigint };

export function getBurnTokenInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<BurnTokenInstructionDataArgs, BurnTokenInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    BurnTokenInstructionDataArgs,
    BurnTokenInstructionData,
    BurnTokenInstructionData
  >(
    s.struct<BurnTokenInstructionData>(
      [
        ['discriminator', s.u8()],
        ['amount', s.u64()],
      ],
      { description: 'BurnTokenInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 8 } as BurnTokenInstructionData)
  ) as Serializer<BurnTokenInstructionDataArgs, BurnTokenInstructionData>;
}

// Instruction.
export function burnToken(
  context: Pick<Context, 'serializer' | 'programs' | 'identity'>,
  input: BurnTokenInstructionAccounts & BurnTokenInstructionDataArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'splToken',
    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
  );

  // Resolved accounts.
  const accountAccount = input.account;
  const mintAccount = input.mint;
  const authorityAccount = input.authority ?? context.identity;

  // Account.
  keys.push({
    pubkey: accountAccount,
    isSigner: false,
    isWritable: isWritable(accountAccount, true),
  });

  // Mint.
  keys.push({
    pubkey: mintAccount,
    isSigner: false,
    isWritable: isWritable(mintAccount, true),
  });

  // Authority.
  signers.push(authorityAccount);
  keys.push({
    pubkey: authorityAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(authorityAccount, false),
  });

  // Data.
  const data = getBurnTokenInstructionDataSerializer(context).serialize(input);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
