/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';

// Accounts.
export type TransferAllSolInstructionAccounts = {
  /** The source account sending all its lamports */
  source?: Signer;
  /** The destination account receiving the lamports */
  destination: PublicKey;
  /** System program */
  systemProgram?: PublicKey;
};

// Arguments.
export type TransferAllSolInstructionData = { discriminator: number };

export type TransferAllSolInstructionDataArgs = {};

export function getTransferAllSolInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  TransferAllSolInstructionDataArgs,
  TransferAllSolInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    TransferAllSolInstructionDataArgs,
    TransferAllSolInstructionData,
    TransferAllSolInstructionData
  >(
    s.struct<TransferAllSolInstructionData>([['discriminator', s.u8()]], {
      description: 'TransferAllSolInstructionData',
    }),
    (value) => ({ ...value, discriminator: 1 } as TransferAllSolInstructionData)
  ) as Serializer<
    TransferAllSolInstructionDataArgs,
    TransferAllSolInstructionData
  >;
}

// Instruction.
export function transferAllSol(
  context: Pick<Context, 'serializer' | 'programs' | 'identity'>,
  input: TransferAllSolInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplSystemExtras',
    'SysExL2WDyJi9aRZrXorrjHJut3JwHQ7R9bTyctbNNG'
  );

  // Resolved accounts.
  const sourceAccount = input.source ?? context.identity;
  const destinationAccount = input.destination;
  const systemProgramAccount = input.systemProgram ?? {
    ...context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    ),
    isWritable: false,
  };

  // Source.
  signers.push(sourceAccount);
  keys.push({
    pubkey: sourceAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(sourceAccount, true),
  });

  // Destination.
  keys.push({
    pubkey: destinationAccount,
    isSigner: false,
    isWritable: isWritable(destinationAccount, true),
  });

  // System Program.
  keys.push({
    pubkey: systemProgramAccount,
    isSigner: false,
    isWritable: isWritable(systemProgramAccount, false),
  });

  // Data.
  const data = getTransferAllSolInstructionDataSerializer(context).serialize(
    {}
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
